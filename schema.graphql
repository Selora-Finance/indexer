enum PoolType {
    STABLE
    VOLATILE
    CONCENTRATED
}

enum LockType {
    MANAGED
    NORMAL
}

enum LPManagementProvider {
    GAMMA
    ICHI
    STEER
}

type Statistics @entity {
    id: ID!
    txCount: BigInt!
    totalPairsCreated: BigInt!
    totalVolumeLockedUSD: BigDecimal! @config(precision: 500, scale: 5)
    totalVolumeLockedETH: BigDecimal! @config(precision: 500, scale: 5)
    totalFeesUSD: BigDecimal! @config(precision: 500, scale: 5)
    totalBribesUSD: BigDecimal! @config(precision: 500, scale: 5)
    totalTradeVolumeUSD: BigDecimal! @config(precision: 500, scale: 5)
    totalTradeVolumeETH: BigDecimal! @config(precision: 500, scale: 5)
}

type Pool @entity {
    id: ID!
    address: Bytes! @index
    name: String!
    token0: Token!
    token1: Token!
    reserve0: BigDecimal! @config(precision: 500, scale: 5)
    reserve1: BigDecimal! @config(precision: 500, scale: 5)
    totalSupply: BigDecimal! @config(precision: 500, scale: 5)
    reserveETH: BigDecimal! @config(precision: 500, scale: 5)
    reserveUSD: BigDecimal! @config(precision: 500, scale: 5)
    token0Price: BigDecimal! @config(precision: 500, scale: 5)
    token1Price: BigDecimal! @config(precision: 500, scale: 5)
    volumeToken0: BigDecimal! @config(precision: 500, scale: 5)
    volumeToken1: BigDecimal! @config(precision: 500, scale: 5)
    volumeUSD: BigDecimal! @config(precision: 500, scale: 5)
    volumeETH: BigDecimal! @config(precision: 500, scale: 5)
    txCount: BigInt!
    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!
    poolHourData: [PoolHourData!]! @derivedFrom(field: "pool")
    mints: [Mint!]! @derivedFrom(field: "pool")
    burns: [Burn!]! @derivedFrom(field: "pool")
    swaps: [Swap!]! @derivedFrom(field: "pool")
    poolType: PoolType!
    gaugeFeesUSD: BigDecimal! @config(precision: 500, scale: 5)
    totalVotes: BigDecimal! @config(precision: 500, scale: 5)
    totalFeesUSD: BigDecimal! @config(precision: 500, scale: 5)
    totalBribesUSD: BigDecimal! @config(precision: 500, scale: 5)
    totalFees0: BigDecimal! @config(precision: 500, scale: 5)
    totalFees1: BigDecimal! @config(precision: 500, scale: 5)
    gaugeFees0CurrentEpoch: BigDecimal! @config(precision: 500, scale: 5)
    gaugeFees1CurrentEpoch: BigDecimal! @config(precision: 500, scale: 5)
    totalEmissions: BigDecimal! @config(precision: 500, scale: 5)
    totalEmissionsUSD: BigDecimal! @config(precision: 500, scale: 5)
    gauge: Gauge @index
    liquidityManager: [LiquidityManager!]! @derivedFrom(field: "pool")
    tickSpacing: BigInt
}

type User @entity {
    id: ID!
    address: Bytes! @index
    gaugePositions: [GaugePosition!]! @derivedFrom(field: "account")
    lpPositions: [LiquidityPosition!]! @derivedFrom(field: "account")
    lockPositions: [LockPosition!]! @derivedFrom(field: "owner")
}

type Gauge @entity {
    id: ID!
    address: Bytes! @index
    depositPool: Pool! @index
    rewardToken: Token! @index
    totalSupply: BigDecimal! @config(precision: 500, scale: 5)
    feeVotingReward: Bytes! @index
    bribeVotingReward: Bytes! @index
    rewardRate: BigDecimal! @config(precision: 500, scale: 5)
    fees0: BigDecimal! @config(precision: 500, scale: 5)
    fees1: BigDecimal! @config(precision: 500, scale: 5)
    isAlive: Boolean!
    emission: BigDecimal! @config(precision: 500, scale: 5)
}

type GaugePosition @entity {
    id: ID!
    gauge: Gauge! @index
    amountDeposited: BigDecimal! @config(precision: 500, scale: 5)
    account: User! @index
    creationTransaction: Bytes!
    creationBlock: BigInt!
}

type LiquidityPosition @entity {
    id: ID!
    pool: Pool! @index
    account: User @index
    position: BigDecimal! @config(precision: 500, scale: 5)
    creationBlock: BigInt!
    creationTransaction: Bytes!
    clPositionTokenId: BigInt @index
}

type LockPosition @entity {
    id: ID!
    position: BigDecimal! @config(precision: 500, scale: 5)
    owner: User! @index
    creationBlock: BigInt!
    creationTransaction: Bytes!
    lockId: BigInt! @index
    lockType: LockType!
    permanent: Boolean!
    lockRewardManager: Bytes @index
    freeRewardManager: Bytes @index
    unlockTime: BigInt!
    totalVoteWeightGiven: BigDecimal! @config(precision: 500, scale: 5)
}

type Token @entity {
    id: ID!
    address: Bytes! @index
    symbol: String!
    name: String!
    decimals: Int!
    tradeVolume: BigDecimal! @config(precision: 500, scale: 5)
    tradeVolumeUSD: BigDecimal! @config(precision: 500, scale: 5)
    txCount: BigInt!
    totalLiquidity: BigDecimal! @config(precision: 500, scale: 5)
    totalLiquidityETH: BigDecimal! @config(precision: 500, scale: 5)
    totalLiquidityUSD: BigDecimal! @config(precision: 500, scale: 5)
    derivedETH: BigDecimal! @config(precision: 500, scale: 5)
    derivedUSD: BigDecimal! @config(precision: 500, scale: 5)
    basePools: [Pool!]! @derivedFrom(field: "token0")
    quotePools: [Pool!]! @derivedFrom(field: "token1")
}

type Transaction @entity {
    id: ID!
    hash: Bytes! @index
    block: BigInt!
    timestamp: BigInt!
    mints: [Mint!]! @derivedFrom(field: "transaction")
    burns: [Burn!]! @derivedFrom(field: "transaction")
    swaps: [Swap!]! @derivedFrom(field: "transaction")
}

type Mint @entity {
    id: ID!
    transaction: Transaction!
    timestamp: BigInt! # need this to pull recent txns for specific token or Pool
    pool: Pool! @index
    to: Bytes!
    liquidity: BigDecimal! @config(precision: 500, scale: 5)
    sender: Bytes
    amount0: BigDecimal
    amount1: BigDecimal
    logIndex: BigInt
    amountUSD: BigDecimal
    feeTo: Bytes
    feeLiquidity: BigDecimal
}

type Burn @entity {
    id: ID!
    transaction: Transaction!
    timestamp: BigInt! # need this to pull recent txns for specific token or Pool
    pool: Pool! @index
    liquidity: BigDecimal! @config(precision: 500, scale: 5)
    sender: Bytes
    amount0: BigDecimal
    amount1: BigDecimal
    to: Bytes
    logIndex: BigInt
    amountUSD: BigDecimal
    needsComplete: Boolean!
    feeTo: Bytes
    feeLiquidity: BigDecimal
}

type Swap @entity {
    id: ID!
    transaction: Transaction!
    timestamp: BigInt! # need this to pull recent txns for specific token or Pool
    pool: Pool! @index
    sender: Bytes!
    from: Bytes! # the EOA that initiated the txn
    amount0In: BigDecimal! @config(precision: 500, scale: 5)
    amount1In: BigDecimal! @config(precision: 500, scale: 5)
    amount0Out: BigDecimal! @config(precision: 500, scale: 5)
    amount1Out: BigDecimal! @config(precision: 500, scale: 5)
    to: Bytes!
    logIndex: BigInt
    amountUSD: BigDecimal! @config(precision: 500, scale: 5)
}

type Bundle @entity {
    id: ID!
    ethPrice: BigDecimal! @config(precision: 500, scale: 5) # price of ETH usd
}

type OverallDayData @entity {
    id: ID!
    date: Int! @index
    volumeETH: BigDecimal! @config(precision: 500, scale: 5)
    volumeUSD: BigDecimal! @config(precision: 500, scale: 5)
    liquidityETH: BigDecimal! @config(precision: 500, scale: 5)
    liquidityUSD: BigDecimal! @config(precision: 500, scale: 5)
    txCount: BigInt!
    feesUSD: BigDecimal! @config(precision: 500, scale: 5)
    totalTradeVolumeETH: BigDecimal! @config(precision: 500, scale: 5)
    totalTradeVolumeUSD: BigDecimal! @config(precision: 500, scale: 5)
}

type PoolHourData @entity {
    id: ID!
    hourStartUnix: Int!
    pool: Pool! @index
    reserve0: BigDecimal! @config(precision: 500, scale: 5)
    reserve1: BigDecimal! @config(precision: 500, scale: 5)
    totalSupply: BigDecimal! @config(precision: 500, scale: 5)
    reserveUSD: BigDecimal! @config(precision: 500, scale: 5)
    reserveETH: BigDecimal! @config(precision: 500, scale: 5)
    hourlyVolumeToken0: BigDecimal! @config(precision: 500, scale: 5)
    hourlyVolumeToken1: BigDecimal! @config(precision: 500, scale: 5)
    hourlyVolumeUSD: BigDecimal! @config(precision: 500, scale: 5)
    hourlyVolumeETH: BigDecimal! @config(precision: 500, scale: 5)
    hourlyTxns: BigInt!
}

type PoolDayData @entity {
    id: ID!
    date: Int!
    pool: Pool! @index
    reserve0: BigDecimal! @config(precision: 500, scale: 5)
    reserve1: BigDecimal! @config(precision: 500, scale: 5)
    totalSupply: BigDecimal! @config(precision: 500, scale: 5)
    reserveUSD: BigDecimal! @config(precision: 500, scale: 5)
    reserveETH: BigDecimal! @config(precision: 500, scale: 5)
    dailyVolumeToken0: BigDecimal! @config(precision: 500, scale: 5)
    dailyVolumeToken1: BigDecimal! @config(precision: 500, scale: 5)
    dailyVolumeUSD: BigDecimal! @config(precision: 500, scale: 5)
    dailyVolumeETH: BigDecimal! @config(precision: 500, scale: 5)
    dailyTxns: BigInt!
}

type TokenDayData @entity {
    id: ID!
    date: Int!
    token: Token! @index
    dailyVolumeToken: BigDecimal! @config(precision: 500, scale: 5)
    dailyVolumeETH: BigDecimal! @config(precision: 500, scale: 5)
    dailyVolumeUSD: BigDecimal! @config(precision: 500, scale: 5)
    dailyTxns: BigInt!
    totalLiquidityToken: BigDecimal! @config(precision: 500, scale: 5)
    totalLiquidityETH: BigDecimal! @config(precision: 500, scale: 5)
    totalLiquidityUSD: BigDecimal! @config(precision: 500, scale: 5)
    priceUSD: BigDecimal! @config(precision: 500, scale: 5)
    priceETH: BigDecimal! @config(precision: 500, scale: 5)
}

type LiquidityManager @entity {
    id: ID!
    address: Bytes! @index
    name: String!
    provider: LPManagementProvider! @index
    pool: Pool! @index
}

type CLPosition @entity {
    id: ID!
    transactionHash: Bytes! @index
    owner: User
}
